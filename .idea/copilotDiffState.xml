<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/debug_exact.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug_exact.py" />
              <option name="updatedContent" value="import pyximport&#10;pyximport.install()&#10;from prefixtrie._impl import cPrefixTrie&#10;&#10;# Test the exact flag issue&#10;print(&quot;=== Testing exact flag behavior ===&quot;)&#10;&#10;entries = [&quot;hello&quot;, &quot;help&quot;, &quot;helicopter&quot;]&#10;trie = cPrefixTrie(entries, allow_indels=True)&#10;&#10;# Test the failing case&#10;result, exact = trie.search(&quot;helllo&quot;, correction_budget=1)&#10;print(f&quot;'helllo' -&gt; '{result}', exact={exact} (should be exact=False)&quot;)&#10;&#10;# Test some other cases for comparison&#10;result, exact = trie.search(&quot;hello&quot;, correction_budget=1)&#10;print(f&quot;'hello' -&gt; '{result}', exact={exact} (should be exact=True)&quot;)&#10;&#10;result, exact = trie.search(&quot;hallo&quot;, correction_budget=1)&#10;print(f&quot;'hallo' -&gt; '{result}', exact={exact} (should be exact=False)&quot;)&#10;&#10;# Test without budget (should only find exact matches)&#10;result, exact = trie.search(&quot;helllo&quot;, correction_budget=0)&#10;print(f&quot;'helllo' (budget=0) -&gt; '{result}', exact={exact} (should be None)&quot;)&#10;&#10;# Test if it's actually the same string&#10;print(f&quot;\nString comparison: 'helllo' == 'hello': {'helllo' == 'hello'}&quot;)&#10;print(f&quot;Lengths: 'helllo'={len('helllo')}, 'hello'={len('hello')}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug_insertion.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug_insertion.py" />
              <option name="updatedContent" value="import pyximport&#10;pyximport.install()&#10;from prefixtrie._impl import cPrefixTrie&#10;&#10;# Test the specific insertion issue&#10;print(&quot;=== Testing insertion logic ===&quot;)&#10;&#10;# Simple case: &quot;hel&quot; should find &quot;help&quot; with 1 insertion&#10;trie = cPrefixTrie([&quot;help&quot;], allow_indels=True)&#10;result, exact = trie.search(&quot;hel&quot;, correction_budget=1)&#10;print(f&quot;'hel' -&gt; 'help': {result} (should be 'help')&quot;)&#10;&#10;# Even simpler case: &quot;he&quot; should find &quot;help&quot; with 2 insertions&#10;result, exact = trie.search(&quot;he&quot;, correction_budget=2)&#10;print(f&quot;'he' -&gt; 'help': {result} (should be 'help')&quot;)&#10;&#10;# Test at trie boundary: &quot;h&quot; should find &quot;help&quot; with 3 insertions&#10;result, exact = trie.search(&quot;h&quot;, correction_budget=3)&#10;print(f&quot;'h' -&gt; 'help': {result} (should be 'help')&quot;)&#10;&#10;# Test empty string should find &quot;help&quot; with 4 insertions&#10;result, exact = trie.search(&quot;&quot;, correction_budget=4)&#10;print(f&quot;'' -&gt; 'help': {result} (should be 'help')&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug_test.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug_test.py" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="import pyximport&#10;pyximport.install()&#10;from prefixtrie._impl import cPrefixTrie&#10;&#10;# Debug the failing test case&#10;print(&quot;=== Debugging insertion/deletion behavior ===&quot;)&#10;&#10;entries = [&quot;hello&quot;, &quot;help&quot;, &quot;helicopter&quot;]&#10;trie = cPrefixTrie(entries, allow_indels=True)&#10;&#10;# Test the failing case&#10;query = &quot;helo&quot;&#10;result, exact = trie.search(query, correction_budget=1)&#10;print(f&quot;Query: '{query}' -&gt; Result: '{result}', Exact: {exact}&quot;)&#10;print(f&quot;Expected: 'hello' (insertion of 'l')&quot;)&#10;print(f&quot;Actual result needs: {len(query)} -&gt; {len(result)} chars&quot;)&#10;&#10;# Let's test what happens with different queries&#10;test_cases = [&#10;    (&quot;helo&quot;, 1),    # missing 'l' - should be &quot;hello&quot;&#10;    (&quot;hel&quot;, 1),     # missing 'p' - should be &quot;help&quot;&#10;    (&quot;helllo&quot;, 1),  # extra 'l' - should be &quot;hello&quot;&#10;    (&quot;helpx&quot;, 1),   # extra 'x' - should be &quot;help&quot;&#10;]&#10;&#10;print(&quot;\n=== Testing various edit scenarios ===&quot;)&#10;for query, budget in test_cases:&#10;    result, exact = trie.search(query, correction_budget=budget)&#10;    print(f&quot;'{query}' (budget={budget}) -&gt; '{result}' (exact={exact})&quot;)&#10;&#10;# Test with each entry individually to see algorithm preference&#10;print(&quot;\n=== Testing with individual entries ===&quot;)&#10;for entry in entries:&#10;    single_trie = cPrefixTrie([entry], allow_indels=True)&#10;    result, exact = single_trie.search(&quot;helo&quot;, correction_budget=1)&#10;    print(f&quot;Single entry '{entry}': 'helo' -&gt; '{result}' (exact={exact})&quot;)&#10;&#10;# Test edit distances manually&#10;print(&quot;\n=== Manual edit distance analysis ===&quot;)&#10;print(&quot;'helo' -&gt; 'hello': 1 insertion (insert 'l' at position 2)&quot;)&#10;print(&quot;'helo' -&gt; 'help': 1 substitution ('o' -&gt; 'p') + 1 deletion (remove 'o')&quot;)&#10;print(&quot;Wait, that's wrong. Let me recalculate:&quot;)&#10;print(&quot;'helo' -&gt; 'help': actually needs 2 edits (substitute 'o'-&gt;'p', then what?)&quot;)&#10;print()&#10;print(&quot;Let's check character by character:&quot;)&#10;print(&quot;helo -&gt; hello: h=h, e=e, l=l, o-&gt;l (substitute), +o (insert) = 2 edits&quot;)&#10;print(&quot;helo -&gt; help:  h=h, e=e, l=l, o-&gt;p (substitute) = 1 edit&quot;)&#10;print()&#10;print(&quot;Actually, I think 'help' IS the correct answer for 'helo' with 1 edit!&quot;)&#10;&#10;# Debug another failing case&#10;print(&quot;\n=== Debugging 'hell' case ===&quot;)&#10;query = &quot;hell&quot;&#10;result, exact = trie.search(query, correction_budget=1)&#10;print(f&quot;Query: '{query}' -&gt; Result: '{result}', Exact: {exact}&quot;)&#10;&#10;print(&quot;\nEdit distance analysis:&quot;)&#10;print(&quot;'hell' -&gt; 'hello': insert 'o' at end = 1 edit&quot;)&#10;print(&quot;'hell' -&gt; 'help': substitute 'l'-&gt;'p' at position 3 = 1 edit&quot;)&#10;print(&quot;Both require exactly 1 edit, so either could be valid!&quot;)&#10;&#10;# Debug the &quot;hel&quot; case&#10;print(&quot;\n=== Debugging 'hel' case ===&quot;)&#10;query = &quot;hel&quot;&#10;result, exact = trie.search(query, correction_budget=1)&#10;print(f&quot;Query: '{query}' -&gt; Result: '{result}', Exact: {exact}&quot;)&#10;&#10;print(&quot;\nEdit distance analysis:&quot;)&#10;print(&quot;'hel' -&gt; 'hello': insert 'l' at pos 3, insert 'o' at pos 4 = 2 edits&quot;)&#10;print(&quot;'hel' -&gt; 'help': insert 'p' at pos 3 = 1 edit&quot;)&#10;print(&quot;'hel' -&gt; 'helicopter': insert many chars = many edits&quot;)&#10;&#10;# Test with individual entries&#10;print(&quot;\n=== Testing 'hel' with individual entries ===&quot;)&#10;for entry in entries:&#10;    single_trie = cPrefixTrie([entry], allow_indels=True)&#10;    result, exact = single_trie.search(&quot;hel&quot;, correction_budget=1)&#10;    print(f&quot;Single entry '{entry}': 'hel' -&gt; '{result}' (exact={exact})&quot;)&#10;&#10;# Test what happens with budget 2&#10;result, exact = trie.search(&quot;hel&quot;, correction_budget=2)&#10;print(f&quot;\nWith budget 2: 'hel' -&gt; '{result}' (exact={exact})&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>